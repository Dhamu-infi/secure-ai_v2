You are an expert frontend developer. Build a React.js + TypeScript + TailwindCSS frontend for the Secure AI Project. Use Axios for API calls and follow this structure.

1. Pages & Components
1.1 Projects Dashboard

Purpose: Shows all projects with overall status and metrics.

Columns: Project Name, Input Type, Sonar Key, Status, Last Scan, Fix %, Deployment Status.

Actions: Click a project → navigate to Project Detail Page.

Sample API Response (GET /projects):

[
  {
    "id": 1,
    "name": "Wallet API",
    "input_type": "GIT",
    "sonar_project_key": "wallet_api",
    "status": "SCAN_COMPLETED",
    "last_scan": "2025-08-17T12:00:00",
    "fix_percentage": 75,
    "deployment_status": "DEPLOYED"
  }
]

1.2 Project Detail Page

Purpose: Show project-specific data.

Tabs:

Issues

Function Blocks

LLM Fixes

Git Commits

Deployments

Actions:

Diff → Compare original vs AI-fixed code

Merge Fix → Apply AI fix

Download → Export report

1.3 Issues Tab

Columns: File, Line Start/End, Severity, Type, Message, Status.

Actions:

Diff → Show code difference

Merge Fix → Apply AI fix

Download → Export scan JSON/PDF

Sample API Response (GET /projects/:id/issues):

[
  {
    "id": 101,
    "file_path": "src/api/user.py",
    "line_start": 23,
    "line_end": 30,
    "severity": "HIGH",
    "vuln_type": "SQL Injection",
    "message": "Unsanitized input used in SQL query",
    "code_snippet": "db.execute(f\"SELECT * FROM users WHERE id={user_id}\")",
    "status": "PENDING",
    "tags": ["security", "database"]
  }
]

1.4 Function Blocks Tab

Columns: File, Function Name, Lines, Block Type.

Actions: View code, view related issues.

1.5 LLM Fixes Tab

Columns: Function Name, AI Response, Status, Created At.

Actions:

Merge Fix → Apply AI fix to source

Diff → Compare original vs fixed code

Sample API Response (GET /projects/:id/llm_fixes):

[
  {
    "function_name": "get_user",
    "llm_response": "Sanitized user_id to prevent SQL Injection",
    "status": "FIX_READY",
    "created_at": "2025-08-17T14:00:00"
  }
]

1.6 Git Commits Tab

Columns: Commit Hash, Author, Message, Timestamp.

Sample API Response (GET /projects/:id/git_commits):

[
  {
    "commit_hash": "a1b2c3d",
    "author": "Ajith Kumar",
    "message": "Applied AI security fixes",
    "committed_at": "2025-08-17T15:30:00"
  }
]

1.7 Deployments Tab

Columns: Environment, Status, Deployed At, Scan ID, Fix ID.

Actions: Trigger deployment (simulate staging/prod).

Sample API Response (GET /projects/:id/deployments):

[
  {
    "deployment_id": 1,
    "environment": "STAGING",
    "status": "DEPLOYED",
    "deployed_at": "2025-08-17T16:00:00",
    "scan_id": 10,
    "fix_id": 5
  }
]

1.8 History Page

Shows project-wise scan/fix/deployment history with timestamps.

Filters: project, date, status.

Display timeline with all actions.

1.9 Scan & Fix Actions

Run Scan → Upload code or repo URL → call /scan.

Auto Fix → Trigger AI fix generation → call /fix.

Rescan → Re-run scan → call /rescan.

Merge Fix → Apply AI fixes → call /merge_fix.

Diff Viewer → Compare original vs fixed code → call /diff.

Download Report → Export scan/fix reports as JSON/PDF.

2. UI / UX Guidelines

Clean, responsive, dashboard-style.

Tables with pagination for issues and function blocks.

Tabs for project details.

Action buttons for Diff, Merge, Rescan, Download.

Progress bars for fix percentage.

Modal popups for code difference viewer.

Sidebar for projects list navigation.

3. API Integration

Use Axios to call all backend routes:

/projects/

/projects/:id/issues

/projects/:id/scan

/projects/:id/fix

/projects/:id/merge_fix

/projects/:id/diff

/projects/:id/rescan

/projects/:id/deploy

/projects/:id/git_commits

/projects/:id/deployments

/projects/:id/history

Handle loading, success, and error states.

4. Additional Features

Diff Viewer for original vs fixed code.

Merge Fix Action.

Report Download (JSON/PDF).

Fix % Metrics on dashboard.

Project-level status indicators.

Extensive comments for maintainability.

Use React Router for page navigation.